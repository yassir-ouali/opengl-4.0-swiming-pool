#version 410

layout(triangles, equal_spacing, ccw) in;

uniform mat4 modelMatrix;
uniform mat4 viewMatrix;
uniform mat4 projectionMatrix;
uniform mat4 modelViewMatrix;
uniform mat4 modelViewProjectionMatrix;
uniform mat3 normalMatrix;

uniform sampler2D heightMap;

in vec3 WorldPos_TES_in[];
in vec2 TexCoord_TES_in[];
in vec3 Normal_TES_in[];

out vec3 WorldPos_FS_in;
out vec2 TexCoord_FS_in;
out vec3 Normal_FS_in;

vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2);
vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2);

void main(){
	WorldPos_FS_in=interpolate3D(WorldPos_TES_in[0],WorldPos_TES_in[1],WorldPos_TES_in[2]);
	TexCoord_FS_in=interpolate2D(TexCoord_TES_in[0],TexCoord_TES_in[1],TexCoord_TES_in[2]);
	Normal_FS_in=interpolate3D(Normal_TES_in[0],Normal_TES_in[1],Normal_TES_in[2]);
	
	WorldPos_FS_in+=normalize(Normal_FS_in)*texture(heightMap,TexCoord_FS_in).x;
	
	gl_Position=projectionMatrix*vec4(normalize(WorldPos_FS_in),1.0);
}

vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2)
{
   	return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2;
}

vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2)
{
   	return vec2(gl_TessCoord.x) * v0 + vec2(gl_TessCoord.y) * v1 + vec2(gl_TessCoord.z) * v2;
}