#version 410

layout(vertices=3) out;

in vec3 WorldPos_CS_in[];
in vec2 TexCoord_CS_in[];
in vec3 Normal_CS_in[];

out vec3 WorldPos_TES_in[];
out vec2 TexCoord_TES_in[];
out vec3 Normal_TES_in[];

uniform vec3 cameraPosition;

float GetTessLevel(float Distance0, float Distance1);

void main()
{
	WorldPos_TES_in[gl_InvocationID]=WorldPos_CS_in[gl_InvocationID];
	TexCoord_TES_in[gl_InvocationID]=TexCoord_CS_in[gl_InvocationID];
	Normal_TES_in[gl_InvocationID]=Normal_CS_in[gl_InvocationID];
	
	float distance1=distance(cameraPosition,WorldPos_TES_in[0]);
	float distance2=distance(cameraPosition,WorldPos_TES_in[1]);
	float distance3=distance(cameraPosition,WorldPos_TES_in[2]);
	
	gl_TessLevelOuter[0]=GetTessLevel(distance1,distance2);
	gl_TessLevelOuter[1]=GetTessLevel(distance2,distance3);
	gl_TessLevelOuter[2]=GetTessLevel(distance1,distance3);;
	
	gl_TessLevelInner[0]=gl_TessLevelOuter[2];
}

float GetTessLevel(float Distance0, float Distance1)
{
    float AvgDistance = (Distance0 + Distance1) / 2.0;

	return 60/AvgDistance;
}